"""Type stubs for anvil_memory module"""

from typing import Optional

# Constants
ERR_SUCCESS: int
ERR_OUT_OF_MEMORY: int
ERR_MEMORY_PERMISSION_CHANGE: int
ERR_MEMORY_DEALLOCATION: int
ERR_MEMORY_WRITE_ERROR: int
EAGER: int
LAZY: int
MIN_ALIGNMENT: int
MAX_ALIGNMENT: int
MIN_ALIGNMENT_EXPONENT: int
MAX_ALIGNMENT_EXPONENT: int

def scratch_allocator_create(capacity: int, alignment: int) -> Optional[object]: ...
def scratch_allocator_destroy(allocator: object) -> int: ...
def scratch_allocator_alloc(allocator: object, size: int, alignment: int) -> Optional[object]: ...
def scratch_allocator_reset(allocator: object) -> int: ...
def scratch_allocator_copy(allocator: object, data: bytes, n_bytes: int) -> Optional[object]: ...
def scratch_allocator_move(allocator: int, data: int, n_bytes: int, free_func_ptr: int) -> Optional[object]: ... 

def stack_allocator_create(capacity: int, alignment: int, alloc_mode: int) -> Optional[object]: ...
def stack_allocator_destroy(allocator: object) -> int: ...
def stack_allocator_alloc(allocator: object, size: int, alignment: int) -> Optional[object]: ...
def stack_allocator_reset(allocator: object) -> int: ...
def stack_allocator_copy(allocator: object, data: bytes, n_bytes: int) -> Optional[object]: ...
def stack_allocator_move(allocator: int, data: int, n_bytes: int, free_func_ptr: int) -> Optional[object]: ...
def stack_allocator_record(allocator: object) -> int: ...
def stack_allocator_unwind(allocator: object) -> int: ...

def read_bytes(ptr: object, size: int) -> bytes: ...
def ptr_to_int(ptr: object) -> int: ...
def write_bytes(ptr: object, data: bytes) -> None: ...